{
  "info": {
    "name": "ReqRes API Tests (Portfolio Ready)",
    "_postman_id": "reqres-collection-002",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Clean, reliable tests for ReqRes public API. No auth, no external headers. All tests pass consistently."
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "if (!pm.environment.get('baseUrl')) { pm.environment.set('baseUrl', 'https://reqres.in/api'); }"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "GET /users?page=2 (list)",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users?page=2"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('2xx status', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1000ms', () => pm.expect(pm.response.responseTime).to.be.below(1000));",
                  "pm.test('JSON content-type', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "const schema = {\"type\": \"object\", \"required\": [\"page\", \"per_page\", \"total\", \"total_pages\", \"data\"], \"properties\": {\"page\": {\"type\": \"number\"}, \"per_page\": {\"type\": \"number\"}, \"total\": {\"type\": \"number\"}, \"total_pages\": {\"type\": \"number\"}, \"data\": {\"type\": \"array\", \"items\": {\"type\": \"object\", \"required\": [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"], \"properties\": {\"id\": {\"type\": \"number\"}, \"email\": {\"type\": \"string\"}, \"first_name\": {\"type\": \"string\"}, \"last_name\": {\"type\": \"string\"}, \"avatar\": {\"type\": \"string\"}}}}}};",
                  "pm.test('Schema validation', () => {",
                  "  const data = pm.response.json();",
                  "  pm.expect(tv4.validate(data, schema)).to.be.true;",
                  "});",
                  "// pick first id to chain",
                  "const arr = pm.response.json().data || [];",
                  "if (arr.length) pm.environment.set('userId', arr[0].id);",
                  "pm.test('userId captured', () => pm.expect(pm.environment.get('userId')).to.exist);"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users/{{userId}} (from list)",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('2xx status', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1000ms', () => pm.expect(pm.response.responseTime).to.be.below(1000));",
                  "pm.test('JSON content-type', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "const schema = {\"type\": \"object\", \"required\": [\"data\"], \"properties\": {\"data\": {\"type\": \"object\", \"required\": [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"], \"properties\": {\"id\": {\"type\": \"number\"}, \"email\": {\"type\": \"string\"}, \"first_name\": {\"type\": \"string\"}, \"last_name\": {\"type\": \"string\"}, \"avatar\": {\"type\": \"string\"}}}}};",
                  "pm.test('Schema validation', () => {",
                  "  const data = pm.response.json();",
                  "  pm.expect(tv4.validate(data, schema)).to.be.true;",
                  "});",
                  "pm.test('Has email & avatar', ()=>{ const u = pm.response.json().data; pm.expect(u.email).to.be.a('string'); pm.expect(u.avatar).to.be.a('string'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users/2 (known user)",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users/2"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('2xx status', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1000ms', () => pm.expect(pm.response.responseTime).to.be.below(1000));",
                  "pm.test('JSON content-type', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "const schema = {\"type\": \"object\", \"required\": [\"data\"], \"properties\": {\"data\": {\"type\": \"object\", \"required\": [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"], \"properties\": {\"id\": {\"type\": \"number\"}, \"email\": {\"type\": \"string\"}, \"first_name\": {\"type\": \"string\"}, \"last_name\": {\"type\": \"string\"}, \"avatar\": {\"type\": \"string\"}}}}};",
                  "pm.test('Schema validation', () => {",
                  "  const data = pm.response.json();",
                  "  pm.expect(tv4.validate(data, schema)).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Create & Update (non-persistent by API design)",
      "item": [
        {
          "name": "POST /users (create; capture id)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"Ramiro\", \"job\": \"Analyst\"}"
            },
            "url": "{{baseUrl}}/users"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('201 Created', ()=> pm.response.to.have.status(201));",
                  "pm.test('Response < 1000ms', ()=> pm.expect(pm.response.responseTime).to.be.below(1000));",
                  "pm.test('JSON content-type', ()=> pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "const schema = {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"string\"}, \"createdAt\": {\"type\": \"string\"}, \"updatedAt\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"job\": {\"type\": \"string\"}}};",
                  "pm.test('Schema validation', () => {",
                  "  const data = pm.response.json();",
                  "  pm.expect(tv4.validate(data, schema)).to.be.true;",
                  "});",
                  "const id = pm.response.json().id; if (id) pm.environment.set('userId', id);",
                  "pm.test('userId stored (create)', ()=> pm.expect(pm.environment.get('userId')).to.exist);",
                  "// NOTE: ReqRes does not persist this id for later GETs"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT /users/{{userId}} (full update; mock response)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"Ramiro Updated\", \"job\": \"Senior Analyst\"}"
            },
            "url": "{{baseUrl}}/users/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('2xx status', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1000ms', () => pm.expect(pm.response.responseTime).to.be.below(1000));",
                  "pm.test('JSON content-type', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "pm.test('200 OK', ()=> pm.response.to.have.status(200));",
                  "const schema = {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"string\"}, \"createdAt\": {\"type\": \"string\"}, \"updatedAt\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"job\": {\"type\": \"string\"}}};",
                  "pm.test('Schema validation', () => {",
                  "  const data = pm.response.json();",
                  "  pm.expect(tv4.validate(data, schema)).to.be.true;",
                  "});",
                  "pm.test('updatedAt present', ()=> pm.expect(pm.response.json().updatedAt).to.exist);"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH /users/{{userId}} (partial update; mock response)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"job\": \"Lead Analyst\"}"
            },
            "url": "{{baseUrl}}/users/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('2xx status', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1000ms', () => pm.expect(pm.response.responseTime).to.be.below(1000));",
                  "pm.test('JSON content-type', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "pm.test('200 OK', ()=> pm.response.to.have.status(200));",
                  "const schema = {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"string\"}, \"createdAt\": {\"type\": \"string\"}, \"updatedAt\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"job\": {\"type\": \"string\"}}};",
                  "pm.test('Schema validation', () => {",
                  "  const data = pm.response.json();",
                  "  pm.expect(tv4.validate(data, schema)).to.be.true;",
                  "});",
                  "pm.test('updatedAt present', ()=> pm.expect(pm.response.json().updatedAt).to.exist);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Delete (non-persistent by API design)",
      "item": [
        {
          "name": "DELETE /users/{{userId}} \u2192 204",
          "request": {
            "method": "DELETE",
            "url": "{{baseUrl}}/users/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('204 No Content', ()=> pm.response.to.have.status(204));",
                  "pm.test('Response < 1000ms', ()=> pm.expect(pm.response.responseTime).to.be.below(1000));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Negative Tests",
      "item": [
        {
          "name": "GET /users/23 \u2192 404",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users/23"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('404 Not Found', ()=> pm.response.to.have.status(404));",
                  "pm.test('Empty body allowed', ()=> { const t = pm.response.text(); pm.expect(t.length === 0 || t==='{}' || t==='null').to.be.true; });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users?delay=3 (slow endpoint)",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users?delay=3"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', ()=> pm.response.to.have.status(200));",
                  "pm.test('Response < 4000ms with delay', ()=> pm.expect(pm.response.responseTime).to.be.below(4000));"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}