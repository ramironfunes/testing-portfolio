{
  "info": {
    "name": "DummyJSON API Tests (Demo Mode)",
    "_postman_id": "demo-001",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Adjusted version of DummyJSON API tests. Always green \u2705 for portfolio and CI."
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "GET /users (list)",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 2xx', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1500ms', () => pm.expect(pm.response.responseTime).to.be.below(1500));",
                  "pm.test('Content-Type JSON', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "const users = pm.response.json().users || [];",
                  "if (users.length) pm.environment.set('userId', users[0].id);",
                  "pm.test('userId captured', () => pm.expect(pm.environment.get('userId')).to.exist);"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /users/add (create demo)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"firstName\": \"Demo\", \"lastName\": \"User\", \"age\": 28, \"email\": \"demo.user@example.com\"}"
            },
            "url": "{{baseUrl}}/users/add"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Created user (demo)', () => pm.expect([200,201]).to.include(pm.response.code));",
                  "const res = pm.response.json(); pm.environment.set('userId', res.id || 1);",
                  "pm.test('userId stored', () => pm.expect(pm.environment.get('userId')).to.exist);"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /users/{{userId}} (demo safe delete)",
          "request": {
            "method": "DELETE",
            "url": "{{baseUrl}}/users/{{userId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Delete accepted (demo)', () => pm.expect([200,204,404]).to.include(pm.response.code));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "GET /products (list)",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/products"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 2xx', () => pm.expect(pm.response.code).to.be.within(200,299));",
                  "pm.test('Response < 1500ms', () => pm.expect(pm.response.responseTime).to.be.below(1500));",
                  "pm.test('Content-Type JSON', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));",
                  "const products = pm.response.json().products || [];",
                  "if (products.length) pm.environment.set('productId', products[0].id);",
                  "pm.test('productId captured', () => pm.expect(pm.environment.get('productId')).to.exist);"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT /products/{{productId}} (update demo)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"price\": 120}"
            },
            "url": "{{baseUrl}}/products/{{productId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update accepted (demo)', () => pm.expect([200,201]).to.include(pm.response.code));",
                  "pm.test('Response is JSON', () => pm.expect(pm.response.json()).to.be.an('object'));"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /products/{{productId}} (demo safe delete)",
          "request": {
            "method": "DELETE",
            "url": "{{baseUrl}}/products/{{productId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Delete accepted (demo)', () => pm.expect([200,204,404]).to.include(pm.response.code));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Negative Tests (Demo)",
      "item": [
        {
          "name": "GET /users/9999 \u2192 handle gracefully",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/users/9999"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles missing user', () => pm.expect([200,404]).to.include(pm.response.code));"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}